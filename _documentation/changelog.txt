3.0.1 (Released 2024-10-26)
----------
- Breaking change.
    - "Extras" has been renamed "Metadata" in license files. "Extras" was an "ugly" name and didn't convey it's purpose.
- Notes:
    - Add "Host" field to config file to allow app to listen on non-localhost. This is used when you use an external proxy and access the app across a network with IP:port.
    - Fix bug where activity log "filter" button wasn't disabled while awaiting data from API. This could cause multiple requests to run by mistake.
    - Update how user ID is retrieved from requests.
    - Improve cookie security.
- Update Process:
    - Backup database and app files (backup server, take snapshot, etc.).
    - Stop the app's executable.
    - Copy and overwrite existing app files.
    - Restart the app's executable. 
    - Update third-party code to use new "Metadata" field and related functions.


3.0.0 (Released 2024-10-05)
----------
- Breaking change.
    - "Extras" has been renamed "Metadata" in license files. "Extras" was an "ugly" name and didn't convey it's purpose.
- Notes:
    - Automatically apply related permissions. If a user can create a license, they should automatically be given permission to view licenses.
    - Add back functionality to view licenses, rather than having to download them first. This was removed by mistake previously.
    - Bump Golang dependencies.
    - Miscellaneous bug fixes.
- Update Process:
    - Backup database and app files (backup server, take snapshot, etc.).
    - Stop the app's executable.
    - Copy and overwrite existing app files.
    - Restart the app's executable. 
    - Update third-party code to use new "Metadata" field and related functions.


2.3.0 (Released 2024-07-07)
----------
- Notes:
    - Implement Authorization header for API key authentication. Providing API key via URL parameter is deprecated.
    - Improved error handling and error messages for user authentication.
    - Miscellaneous bug fixes.
- Update Process:
    - Backup database and app files (backup server, take snapshot, etc.).
    - Stop the app's executable.
    - Copy and overwrite existing app files.
    - Restart the app's executable. 


2.2.0 (Released 2024-05-05)
----------
- Notes:
    - Update Golang dependencies.
    - Update client-side dependencies (JS, CSS).
    - Don't use a hard-coded default password when deploying a new database.
        - Random password is generated and shown.
        - Improved security.
    - Show warning when default initial user is still in use.
        - Remind users to disable this user for improved security.
    - More diagnostic info.
    - Change 2FA algorithm to SHA1 to work with Google Authenticator.
        - Google Authenticator doesn't like SHA256.
    - Improved activity logging pages.
    - Redo handling of timezone conversion for when datetimes are displayed in GUI or used for sorting or filtering queries.
    - Redo paths/endpoints of pages to have a bit more of a hierarchy. Try to improve flow of URLs a bit.
    - Lots of little bug fixes and typo fixes.
    - Redo of how pages are build/displayed.
        - Code to show pages per endpoint is way cleaner now.
        - HTML source files are better organized.
- Update Process:
    - Backup database and app files (backup server, take snapshot, etc.).
    - Stop the app's executable.
    - Copy and overwrite existing app files.
    - Restart the app's executable. 


2.1.4 (Released 2023-10-15)
----------
- Notes:
    - Revise API key management to very unlikely bug where if numerous duplicate API keys were created, but not saved to database, a success-looking message was returned rather than an error.
    - Show only partial API key in list of API keys to improve security.
    - Revise build script to use config file. Easier to modify and update build script as needed.
    - Remove need for key-value key to be unique, just return latest version of each key.
- Update Process:
    - Backup database and app files (backup server, take snapshot, etc.).
    - Stop the app's executable.
    - Copy and overwrite existing app files.
    - Restart the app's executable. 


2.1.3
----------
- Notes:
    - Utilize new hashfs package.
    - Bump server-side dependencies.
- Update Process:
    - Backup database and app files (backup server, take snapshot, etc.).
    - Stop the app's executable.
    - Copy and overwrite existing app files.
    - Restart the app's executable. 


2.1.2
----------
- Notes:
    - Return diagnostics page information as plain text or JSON, makes copy-pasting info for sharing easier.
    - Display link to healthcheck URL on admin tools page so that this endpoint is easier to find.
    - Set SameSite field for cookies to Lax to stop Chrome from logging users out if they navigate to a page from browser's history.
    - Implement initial icons/logos.
- Update Process:
    - Backup database and app files (backup server, take snapshot, etc.).
    - Stop the app's executable.
    - Copy and overwrite existing app files.
    - Restart the app's executable.  


2.1.1
----------
- Notes:
    - Fix bug when an numeric value was provided in a text custom field. License could not be created.
- Update Process:
    - Backup database and app files (backup server, take snapshot, etc.).
    - Stop the app's executable.
    - Copy and overwrite existing app files.
    - Restart the app's executable.


2.1.0
----------
- Notes:
    - Improve config file validation and handling of paths.
    - Update go dependencies.
    - Add DatetimeModified column to key_value table to be similar to other tables.
    - Add Referrer column to activity_log table to capture more diagnostic info.
    - Fix bug with 2FA enrollment QR code not displaying.
    - Activity log and user login history now use "page plus API call" style to load page and data.
        - Page loads near instantly with a "loading" message for data, less obvious latency to the end user.
        - Better filtering options.
    - Make sure database query statments are closed after use (defer stmt.Close()) to prevent db resource exhaustion.
    - Use hashfs for serving of static assets, improved caching and cache busting.
    - Use fs.FS for handling all source GUI files (HTML templates, CSS, JS), easier handling between on-disk and embedded files.
    - Migrate everything from third-party templates package to internal pages package, one less dependency and easier to manage.
    - Fix some styling bugs.
    - Fix some UI interaction bugs.
    - Rename Verify() to VerifySignature() to be clearer in what this func does. This does not check if a license is expired.
        - Existing Verify() func is deprecated and just calls VerifySignature().
    - Better document how to Verify() and then check expiration with Expired().
        - Client example.
        - README.
    - Remove reverify functionality since it wasn't really used. End-users should just implement this as they see fit.
- New Features:
    - Add user profile page so users can change their own passwords, they no longer need to speak with an admin.
    - Define new functionality for checking if a license is expired.
        - Had a bit of this before, but it wasn't clean.
        - New Expired(), ExpiresIn(), and ExpiresInDays() funcs to help here.
- DB Schema Update:
    - New Columns:
        - key_value:
            - DatetimeModified DATETIME DEFAULT CURRENT_TIMESTAMP
        - activity_log:
            - Referrer TEXT NOT NULL DEFAULT ""
- Update Process:
    - Backup database and app files (backup server, take snapshot, etc.).
    - Stop the app's executable.
    - Copy and overwrite existing app files.
    - Run executable with --update-db flag. Wait for successful completion.
    - Restart the app's executable.


2.0.0
----------
- Notes:
    - Complete redo of app to allow of open sourcing.
    
- New Features:
    - Open source-able.
    - Database is deployed up on first run. No need to use -deploy-db flag.
    - Default config file is created if no config file exists at path to config file.
    - Private keys can be encrypted in the database.
