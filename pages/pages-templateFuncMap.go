package pages

import (
	"html/template"
	"path"
	"strings"
)

//This file defines functions for use in HTML templates. These funcs are additional
//functions that can be used in {{ }} declarations inside templates. To use one or more
//of these funcs, you must add them to the FuncMap field on your config prior to
//calling Build().
//
//For more info, see https://pkg.go.dev/text/template#hdr-Functions

// funcMap defines the list of extra function we want to be able to use in HTML
// templates. This var will be used in Func() when templates.Parse... is called.
var funcMap = template.FuncMap{
	"static": static,
}

// static is used to translate filenames from a standard "styles.min.css" to the
// version that incorporates a hash generated by hashfs. This is done for cache-
// busting purposes.
//
// Use as {{static "/static/css/styles.css"}} in conjunction with
// r.PathPrefix("/static/").Handler(http.StripPrefix("/static/", hashfs.FileServer(staticFilesHashFS)))
//
// This was specifically added to support using hashfs. There is no reason for this to
// be publicly documented.
func static(originalPath string) string {
	//If in development mode, just return path as-is. We will serve a non-cache-busted
	//version of the file since during development we refresh the browser a lot and
	//don't want to cache things mistakenly.
	if cfg.Development {
		return originalPath
	}

	//Trim the "/static/" from the path since the fs.FS for the embedded files omits
	//the parent "/static/" directory.
	trimmedPath := strings.TrimPrefix(originalPath, "/static/")
	hashFSPath := cfg.StaticFiles.HashName(trimmedPath)

	//Have to prefix the path with "/static/" since it was stripped to look up the
	//file in the hashfs but the path expected by this app's server starts with /static/.
	return path.Join("/", "static", hashFSPath)
}
